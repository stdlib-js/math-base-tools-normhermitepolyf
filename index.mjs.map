{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isint from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Evaluates a normalized Hermite polynomial using single-precision floating-point arithmetic.\n*\n* @param {NonNegativeInteger} n - nonnegative polynomial degree\n* @param {number} x - evaluation point\n* @returns {number} function value\n*\n* @example\n* var v = normhermitepolyf( 1, 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = normhermitepolyf( 0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = normhermitepolyf( 2, 0.5 );\n* // returns -0.75\n*\n* @example\n* var v = normhermitepolyf( -1, 0.5 );\n* // returns NaN\n*/\nfunction normhermitepolyf( n, x ) {\n\tvar y1;\n\tvar y2;\n\tvar y3;\n\tvar i;\n\n\tif ( isnanf( n ) || isnanf( x ) || n < 0 || !isint( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n === 0 ) {\n\t\t// `x` is completely canceled from the expression:\n\t\treturn 1.0;\n\t}\n\tx = float64ToFloat32( x );\n\tif ( n === 1 ) {\n\t\treturn x;\n\t}\n\ty2 = 1.0;\n\ty3 = 0.0;\n\tfor ( i = n; i > 1; i-- ) {\n\t\ty1 = float64ToFloat32( float64ToFloat32( x*y2 ) - float64ToFloat32( i*y3 ) ); // eslint-disable-line max-len\n\t\ty3 = y2;\n\t\ty2 = y1;\n\t}\n\treturn float64ToFloat32( float64ToFloat32( x*y2 ) - y3 );\n}\n\n\n// EXPORTS //\n\nexport default normhermitepolyf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isint from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating a normalized Hermite polynomial using single-precision floating-point arithmetic.\n*\n* @param {NonNegativeInteger} n - polynomial degree\n* @returns {Function} function for evaluating a normalized Hermite polynomial\n*\n* @example\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -0.75\n*/\nfunction factory( n ) {\n\tif ( n < 0 || isnanf( n ) || !isint( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( n === 0 ) {\n\t\treturn constantFunction( 1.0 );\n\t}\n\treturn polyval;\n\n\t/**\n\t* Evaluates a normalized Hermite polynomial using single-precision floating-point arithmetic.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a normalized Hermite polynomial\n\t* @returns {number} result\n\t*/\n\tfunction polyval( x ) {\n\t\tvar y1;\n\t\tvar y2;\n\t\tvar y3;\n\t\tvar i;\n\n\t\tif ( isnanf( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tx = float64ToFloat32( x );\n\t\ty2 = 1.0;\n\t\ty3 = 0.0;\n\t\tfor ( i = n; i > 1; i-- ) {\n\t\t\ty1 = float64ToFloat32( float64ToFloat32( x*y2 ) - float64ToFloat32( i*y3 ) ); // eslint-disable-line max-len\n\t\t\ty3 = y2;\n\t\t\ty2 = y1;\n\t\t}\n\t\treturn float64ToFloat32( float64ToFloat32( x*y2 ) - y3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a normalized Hermite polynomial using single-precision floating-point arithmetic.\n*\n* @module @stdlib/math-base-tools-normhermitepolyf\n*\n* @example\n* import normhermitepolyf from '@stdlib/math-base-tools-normhermitepolyf';\n*\n* var v = normhermitepolyf( 1, 0.5 );\n* // returns 0.5\n*\n* v = normhermitepolyf( 0, 0.5 );\n* // returns 1.0\n*\n* v = normhermitepolyf( 2, 0.5 );\n* // returns -0.75\n*\n* v = normhermitepolyf( -1, 0.5 );\n* // returns NaN\n*\n* @example\n* import { factory as factory } from '@stdlib/math-base-tools-normhermitepolyf';\n*\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -0.75\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["normhermitepolyf","n","x","y1","y2","y3","i","isnanf","isint","NaN","float64ToFloat32","factory","constantFunction","setReadOnly","main"],"mappings":";;4gBAoDA,SAASA,EAAkBC,EAAGC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKC,EAAQN,IAAOM,EAAQL,IAAOD,EAAI,IAAMO,EAAOP,GACnD,OAAOQ,IAER,GAAW,IAANR,EAEJ,OAAO,EAGR,GADAC,EAAIQ,EAAkBR,GACX,IAAND,EACJ,OAAOC,EAIR,IAFAE,EAAK,EACLC,EAAK,EACCC,EAAIL,EAAGK,EAAI,EAAGA,IACnBH,EAAKO,EAAkBA,EAAkBR,EAAEE,GAAOM,EAAkBJ,EAAED,IACtEA,EAAKD,EACLA,EAAKD,EAEN,OAAOO,EAAkBA,EAAkBR,EAAEE,GAAOC,EACrD,CCnCA,SAASM,EAASV,GACjB,OAAKA,EAAI,GAAKM,EAAQN,KAAQO,EAAOP,GAC7BW,EAAkBH,KAEf,IAANR,EACGW,EAAkB,GAW1B,SAAkBV,GACjB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKC,EAAQL,GACZ,OAAOO,IAKR,IAHAP,EAAIQ,EAAkBR,GACtBE,EAAK,EACLC,EAAK,EACCC,EAAIL,EAAGK,EAAI,EAAGA,IACnBH,EAAKO,EAAkBA,EAAkBR,EAAEE,GAAOM,EAAkBJ,EAAED,IACtEA,EAAKD,EACLA,EAAKD,EAEN,OAAOO,EAAkBA,EAAkBR,EAAEE,GAAOC,EACpD,CACF,CCnBAQ,EAAAC,EAAA,UAAAH"}